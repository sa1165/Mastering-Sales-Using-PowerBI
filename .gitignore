import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load the dataset
transactions = pd.read_csv(r'C:\Users\LENOVO\Desktop\csvs\sales_transactions.csv')
transactions['order_date'] = pd.to_datetime(transactions['order_date'])

# Aggregate sales amount by date
sales_data = transactions.groupby('order_date')['sales_amount'].sum().reset_index()
sales_data = sales_data.set_index('order_date')

# Fit Exponential Smoothing model
model = ExponentialSmoothing(sales_data['sales_amount'], 
                             seasonal='add', 
                             seasonal_periods=12,  # Adjust based on seasonality
                             trend='add')
fitted_model = model.fit()

# Forecast for the next 36 months (3 years)
forecast_values = fitted_model.forecast(36)
forecast_index = pd.date_range(sales_data.index[-1] + pd.DateOffset(months=1), periods=36, freq='MS')

# Plot actual sales and forecast
plt.figure(figsize=(12, 6))
plt.plot(sales_data, label='Actual Sales')
plt.plot(forecast_index, forecast_values, color='red', label='Forecasted Sales')
plt.title('Sales Forecast for the Next 3 Years with Exponential Smoothing')
plt.xlabel('Date')
plt.ylabel('Sales Amount')
plt.legend()
plt.show()

# Display forecasted values
forecast_output = pd.DataFrame({'Date': forecast_index, 'Forecasted Sales': forecast_values})
print("Forecasted Sales for the Next 3 Years:")
print(forecast_output)

# Model Evaluation - Calculate MAE, MSE, RMSE (if you have actual sales for the forecast period)
# Uncomment and adjust the code if actual values are available
# actual_values = sales_data['sales_amount'][-36:]  # Adjust this to match your actual data
# mae = mean_absolute_error(actual_values, forecast_values)
# mse = mean_squared_error(actual_values, forecast_values)
# rmse = np.sqrt(mse)
# print(f'MAE: {mae}, MSE: {mse}, RMSE: {rmse}')

# Residual Analysis
residuals = fitted_model.resid
plt.figure(figsize=(12, 6))
plt.plot(residuals)
plt.title('Residuals of the Forecast Model')
plt.show()

sales_data = transactions.groupby('order_date')['sales_amount'].sum().reset_index()
sales_data = sales_data.set_index('order_date')

# Fit Exponential Smoothing model
model = ExponentialSmoothing(
    sales_data['sales_amount'],
    seasonal='add',
    seasonal_periods=12,  # Adjust based on seasonality
    trend='add'
)
fitted_model = model.fit()

# Forecast for the next 36 months (3 years)
forecast_periods = 36
forecast_values = fitted_model.forecast(forecast_periods)
forecast_index = pd.date_range(start=sales_data.index[-1] + pd.DateOffset(months=1), 
                                periods=forecast_periods, freq='MS')

# Plot actual sales and forecast
plt.figure(figsize=(12, 6))
plt.plot(sales_data, label='Actual Sales', color='blue')
plt.plot(forecast_index, forecast_values, label='Forecasted Sales', color='red', linestyle='--')
plt.title('Sales Forecast for the Next 3 Years with Exponential Smoothing')
plt.xlabel('Date')
plt.ylabel('Sales Amount')
plt.legend()
plt.grid()
plt.tight_layout()
plt.show()

# Display forecasted values
forecast_output = pd.DataFrame({'Date': forecast_index, 'Forecasted Sales': forecast_values})
print("Forecasted Sales for the Next 3 Years:")
print(forecast_output)

# Model Evaluation - Calculate MAE, MSE, RMSE (if you have actual sales for the forecast period)
# Uncomment and adjust the code if actual values are available
# try:
#     actual_values = sales_data['sales_amount'][-forecast_periods:]  # Adjust to match your actual data
#     mae = mean_absolute_error(actual_values, forecast_values)
#     mse = mean_squared_error(actual_values, forecast_values)
#     rmse = np.sqrt(mse)
#     print(f'MAE: {mae}, MSE: {mse}, RMSE: {rmse}')
# except Exception as e:
#     print(f"Error in model evaluation: {e}")

# Residual Analysis
residuals = fitted_model.resid
plt.figure(figsize=(12, 6))
plt.plot(residuals, marker='o', linestyle='None')
plt.axhline(0, color='red', linestyle='--', linewidth=1)  # Line at zero for reference
plt.title('Residuals of the Forecast Model')
plt.xlabel('Time')
plt.ylabel('Residuals')
plt.grid()
plt.tight_layout()
plt.show()
